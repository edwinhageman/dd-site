name: Build, Test and Deploy

on:
  push:
    branches: [ "main" ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.actor }}/dd_site:latest

jobs:
  build:
    name: build
    runs-on: ubuntu-latest
    env:
      GCP_CREDENTIALS_PATH: ./secrets/gcp-credentials.json
    steps:
      - uses: actions/checkout@v4
      - name: Setup configuration
        run: |
          mkdir secrets
          echo '${{ secrets.GCP_CREDENTIALS }}' >> secrets/gcp-credentials.json
      - name: Setup java
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 21
          cache: maven
      - name: Build with maven
        run: ./mvnw clean install
      - name: Rename artifact
        run: cp ./target/*.jar ./target/app.jar
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: app
          path: target/app.jar
      - name: Cleanup
        if: always()
        run: rm -rf secrets

  publish:
    needs: build
    name: publish image
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: app
          path: ./target
      - name: login
        run: |
          echo ${{ secrets.GH_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
      - name: Build and Publish
        run: |
          docker build . --tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

  migrate-database:
    needs: publish
    name: run database migrations
    runs-on: ubuntu-latest
    env:
      FLYWAY_USER: ${{ secrets.DB_USER }}
      FLYWAY_PASSWORD: ${{ secrets.DB_PASSWORD }}

    steps:
      - uses: actions/checkout@v4
      - name: Setup java
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 21
          cache: maven
      - name: install ssh keys
        run: |
          install -m 600 -D /dev/null ~/.ssh/id_rsa
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.SSH_HOST }} > ~/.ssh/known_hosts
      - name: Create SSH tunnel to db
        run: |
          ssh -fN -L 5432:localhost:${{ secrets.DB_PORT }} ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}
      - name: Run Flyway Migrate
        run: |
          ./mvnw flyway:migrate \
            -Dflyway.url=jdbc:postgresql://localhost:5432/${{ secrets.DB_NAME }}
      - name: cleanup
        run: rm -rf ~/.ssh

  deploy:
    needs: migrate-database
    name: deploy image
    runs-on: ubuntu-latest

    steps:
      - name: install ssh keys
        run: |
          install -m 600 -D /dev/null ~/.ssh/id_rsa
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.SSH_HOST }} > ~/.ssh/known_hosts
      - name: connect and pull
        run: ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "cd ${{ secrets.WORKDIR }} && docker compose pull && docker compose up -d && exit"
      - name: cleanup
        run: rm -rf ~/.ssh

  cleanup:
    needs: deploy
    name: cleanup artifacts
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Delete artifacts
        uses: geekyeggo/delete-artifact@v5
        with:
          name: app